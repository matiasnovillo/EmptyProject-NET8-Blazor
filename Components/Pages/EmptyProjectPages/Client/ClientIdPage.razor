@page "/EmptyProject/ClientPage/{ClientId:int}"

@using EmptyProject.Areas.EmptyProject.Repositories;
@using EmptyProject.Areas.EmptyProject.Entities;
@using EmptyProject.Areas.EmptyProject.DTOs;
@using System.ComponentModel.DataAnnotations;
@inject ClientRepository clientRepository;

@if (ClientId == 0)
{
    <PageTitle>Agregar client - EmptyProject</PageTitle>
}
else
{
    <PageTitle>Editar client - EmptyProject</PageTitle>
}

<EmptyProject.Components.Layout.SideNav lstFoldersAndPages="lstFoldersAndPages"></EmptyProject.Components.Layout.SideNav>

<div class="main-content position-relative max-height-vh-100 h-100">
    <EmptyProject.Components.Layout.NavBarDashboard Pagina="Client"></EmptyProject.Components.Layout.NavBarDashboard>
    <div class="container-fluid px-2 px-md-4">
        <div class="page-header min-height-300 border-radius-xl mt-4"
             style="background-image: url('assets/img/illustrations/Landscape2.jpg');">
            <span class="mask bg-gradient-primary opacity-6"></span>
        </div>
        <div class="card card-body mx-3 mx-md-4 mt-n6">
            <div class="card-header mb-0 pb-0">
                <div class="d-flex justify-content-between">
                    <h3 class="mb-3">
                        @if (ClientId == 0)
                        {
                            <span>Agregar client</span>
                        }
                        else
                        {
                            <span>Editar client</span>
                        }
                    </h3>
                    <NavLink class="btn btn-outline-dark" href="EmptyProject/ClientPage">
                        <span class="fas fa-chevron-left"></span>
                        &nbsp;Volver
                    </NavLink>
                </div>
                <hr />
            </div>
            <div class="card-body px-0">
                <form method="post" @onsubmit="Submit"
                      @formname="client-form" class="mb-4">
                    <AntiforgeryToken />
                    <!--Boolean-->
                    <div class="form-check form-switch">
                        <input class="form-check-input"
                        type="checkbox"
                        value="@Client!.Boolean"
                        @onchange="HandleBooleanChange"
                        id="boolean" />
                        <label class="form-check-label"
                        for="boolean">
                            Boolean
                        </label>
                    </div>
                    <!--DateTime-->
                    <div class="input-group input-group-static mb-3">
                        <label for="datetime">
                            DateTime
                            @if (ErrorMessageDateTime != "")
                            {
                                @((MarkupString)ErrorMessageDateTime)
                            }
                        </label>
                        <input type="datetime"
                        id="datetime"
                        class="form-control"
                        value="@Client!.DateTime"
                        @onchange="HandleDateTimeChange"/>
                    </div>
                    <!--Decimal-->
                    <div class="input-group input-group-static mb-3">
                        <label for="decimal">
                            Decimal
                            @if (ErrorMessageDecimal != "")
                            {
                                @((MarkupString)ErrorMessageDecimal)
                            }
                        </label>
                        <input type="number"
                        step="0.1"
                        id="decimal" 
                        class="form-control"
                        value="@Client!.Decimal"
                        @onchange="HandleDecimalChange" />
                    </div>
                    <!--Integer-->
                    <div class="input-group input-group-static mb-3">
                        <label for="integer">
                            Integer
                            @if (ErrorMessageInteger != "")
                            {
                                @((MarkupString)ErrorMessageInteger)
                            }
                        </label>
                        <input type="number"
                        step="1" 
                        id="integer"
                        class="form-control"
                        value="@Client!.Integer"
                        @onchange="HandleIntegerChange" />
                    </div>
                    <!--TextArea-->
                    <div class="input-group input-group-static mb-3">
                        <label for="textarea">
                            TextArea
                            @if (ErrorMessageTextArea != "")
                            {
                                @((MarkupString)ErrorMessageTextArea)
                            }
                        </label>
                        <textarea rows="10"
                        class="form-control"
                        value="@Client!.TextArea"
                        @onchange="HandleTextAreaChange"
                        id="textarea">
                        </textarea>
                    </div>
                    <!--TextBasic-->
                    <div class="input-group input-group-static mb-3">
                        <label for="textbasic">
                            TextBasic
                            @if(ErrorMessageTextBasic != "")
                            {
                            @((MarkupString)ErrorMessageTextBasic)
                            }
                        </label>
                        <input type="text"
                               id="textbasic"
                               class="form-control"
                               value="@Client!.TextBasic"
                               @onchange="HandleTextBasicChange" />
                    </div>
                    <!--TextEditor-->
                    <div class="mb-3">
                        <label for="quill-editor-texteditor">
                            TextEditor
                            @if (ErrorMessageTextEditor != "")
                            {
                                @((MarkupString)ErrorMessageTextEditor)
                            }
                        </label>
                        <div id="quill-editor-texteditor">
                        </div>
                        <button id="button-quill-conversion-texteditor"
                        type="button"
                        class="btn btn-outline-primary my-2">
                            Convertir a HTML
                        </button>
                        <input type="text"
                               id="quill-result-texteditor"
                               class="form-control"
                               value="@Client!.TextEditor"
                               @onchange="HandleTextEditorChange" />
                    </div>
                    <link rel="stylesheet" href="assets/vendor/quill/dist/quill.snow.css">
                    <script type="text/javascript">
                        var quilleditortexteditor = new Quill("#quill-editor-texteditor", {
                            theme: 'snow',
                            modules: {
                                toolbar: {
                                    container: [
                                        [{ header: [1, 2, 3, 4, 5, 6, false] }],
                                        ["bold", "italic", "underline", "strike"],
                                        [{ list: "ordered" }, { list: "bullet" }],
                                        ["link", "image", "video"],
                                        ["clean"]
                                    ],
                                    handlers: {
                                        image: imageHandlerTextEditor,
                                        video: videoHandlerTextEditor
                                    }
                                }
                            }
                        });

                        function imageHandlerTextEditor() {
                            var range = this.quill.getSelection();
                            var value = prompt('Por favor, ingrese la URL de la imagen');
                            if (value) {
                                this.quill.insertEmbed(range.index, 'image', value, Quill.sources.USER);
                            }
                        }

                        function videoHandlerTextEditor() {
                            var range = this.quill.getSelection();
                            var value = prompt('Por favor, ingrese la URL del video');
                            if (value) {
                                this.quill.insertEmbed(range.index, 'video', value, Quill.sources.USER);
                            }
                        }

                        $("#button-quill-conversion-texteditor").on("click", function () {
                            var htmltexteditor = quilleditortexteditor.root.innerHTML;
                            $("#quill-result-texteditor").val(htmltexteditor)
                        });

                        $(document).ready(function () {
                            quilleditortexteditor.container.childNodes[0].innerHTML = quilleditortexteditor.getText();
                        });
                    </script>
                    <script src="assets/vendor/quill/dist/quill.min.js"></script>
                    <!--TextEmail-->
                    <div class="input-group input-group-static mb-3">
                        <label for="textemail">
                            TextEmail
                            @if (ErrorMessageTextEmail != "")
                            {
                                @((MarkupString)ErrorMessageTextEmail)
                            }
                        </label>
                        <input type="email"
                               id="textemail"
                               class="form-control"
                               value="@Client!.TextEmail"
                               @onchange="HandleTextEmailChange" />
                    </div>
                    <!--TextFile-->
                    <div class="input-group input-group-static mb-3">
                        <label for="textfile">
                            TextFile
                            @if (ErrorMessageTextFile != "")
                            {
                                @((MarkupString)ErrorMessageTextFile)
                            }
                        </label>
                        <InputFile type="file"
                               id="textfile"
                               class="form-control"
                               
                               OnChange="@UploadTextFile" />
                        @{
                            var ProgressCssForTextFile = "progress" + (DisplayProgressForTextFile ? "" : "d-none");
                            var ProgressWidthStyleForTextFile = ProgressPercentForTextFile + "%";
                        }
                        <!--Progress bar-->
                        <div class="@ProgressCssForTextFile">
                            <div class="progress-bar progress-bar-striped progress-bar-animated @ProgressBarColourForTextFile"
                                 role="progressbar" style="width:@ProgressWidthStyleForTextFile"
                                 area-valuenow="@ProgressPercentForTextFile" 
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                            </div>
                        </div>
                    </div>
                    <!--TextHexColour-->
                    <div class="input-group input-group-static mb-3">
                        <label for="texthexcolour">
                            TextHexColour
                            @if (ErrorMessageTextHexColour != "")
                            {
                                @((MarkupString)ErrorMessageTextHexColour)
                            }
                        </label>
                        <input type="color"
                               id="texthexcolour"
                               class="form-control"
                               value="@Client!.TextHexColour"
                               @onchange="HandleTextHexColourChange" />
                    </div>
                    <!--TextPassword-->
                    <div class="input-group input-group-static mb-3">
                        <label for="textpassword">
                            TextPassword
                            @if (ErrorMessageTextPassword != "")
                            {
                                @((MarkupString)ErrorMessageTextPassword)
                            }
                        </label>
                        <input type="password"
                               id="textpassword"
                               class="form-control"
                               value="@Client!.TextPassword"
                               @onchange="HandleTextPasswordChange"/>
                    </div>
                    <!--TextPhoneNumber-->
                    <div class="input-group input-group-static mb-3">
                        <label for="textphonenumber">
                            TextPhoneNumber
                            @if (ErrorMessageTextPhoneNumber != "")
                            {
                                @((MarkupString)ErrorMessageTextPhoneNumber)
                            }
                        </label>
                        <input type="tel"
                               id="textphonenumber"
                               class="form-control"
                               value="@Client!.TextPhoneNumber"
                               @onchange="HandleTextPhoneNumberChange" />
                    </div>
                    <!--TextTag-->
                    <div class="input-group input-group-static mb-3">
                        <label for="texttag">
                            TextTag
                            @if (ErrorMessageTextTag != "")
                            {
                                @((MarkupString)ErrorMessageTextTag)
                            }
                        </label>
                        <input type="text"
                               id="texttag"
                               class="form-control"
                               value="@Client!.TextTag"
                               @onchange="HandleTextTagChange"
                               data-toggle="tags" />
                    </div>
                    <!--TextURL-->
                    <div class="input-group input-group-static mb-3">
                        <label for="texturl">
                            TextURL
                            @if (ErrorMessageTextURL != "")
                            {
                                @((MarkupString)ErrorMessageTextURL)
                            }
                        </label>
                        <input type="url"
                               id="texturl"
                               class="form-control"
                               value="@Client!.TextURL"
                               @onchange="HandleTextURLChange" />
                    </div>
                    <!--ClientStatusId-->
                    <div class="input-group input-group-static mb-3">
                        <label for="clientstatusid">
                            ClientStatusId
                            @if (ErrorMessageClientStatusId != "")
                            {
                                @((MarkupString)ErrorMessageClientStatusId)
                            }
                        </label>
                        <select id="clientstatusid"
                            class="form-control"
                            value="@Client!.ClientStatusId"
                            @onchange="HandleClientStatusIdChange">
                            <option value="0">Seleccionar</option>
                        </select>
                    </div>
                    <!--TimeSpan-->
                    <div class="input-group input-group-static mb-3">
                        <label for="timespan">
                            TimeSpan
                            @if (ErrorMessageTimeSpan != "")
                            {
                                @((MarkupString)ErrorMessageTimeSpan)
                            }
                        </label>
                        <input type="time"
                               id="timespan"
                               class="form-control"
                               value="@Client!.TimeSpan"
                               @onchange="HandleTimeSpanChange" />
                    </div>
                    
                    <hr />
                    @((MarkupString)Message)
                    <div class="d-flex justify-content-between">
                        <button id="btn-submit" type="submit"
                                class="btn btn-success">
                            <i class="fas fa-pen"></i>
                            @if (ClientId == 0)
                            {
                                <span>Agregar</span>
                            }
                            else
                            {
                                <span>Editar</span>
                            }
                        </button>
                        <NavLink class="btn btn-outline-dark mx-3" href="EmptyProject/ClientPage">
                            <span class="fas fa-chevron-left"></span>
                            &nbsp;Volver
                        </NavLink>
                    </div>
                </form>
                
            </div>
        </div>
    </div>

    <EmptyProject.Components.Layout.FixedPlugin></EmptyProject.Components.Layout.FixedPlugin>
    <EmptyProject.Components.Layout.FooterDashboard></EmptyProject.Components.Layout.FooterDashboard>
</div>

@code {
    #region Properties
    public List<folderForDashboard> lstFoldersAndPages = [];

    public List<Role> lstRole { get; set; } = [];

    [Parameter]
    public int ClientId { get; set; }

    public string Message { get; set; } = "";

    [SupplyParameterFromForm]
    public Client Client { get; set; } = new();

    public User User { get; set; } = new();

    //Error messages for inputs
    public string ErrorMessageClientId { get; set; } = "";
    public string ErrorMessageActive { get; set; } = "";
    public string ErrorMessageDateTimeCreation { get; set; } = "";
    public string ErrorMessageDateTimeLastModification { get; set; } = "";
    public string ErrorMessageUserCreationId { get; set; } = "";
    public string ErrorMessageUserLastModificationId { get; set; } = "";
    public string ErrorMessageBoolean { get; set; } = "";
    public string ErrorMessageDateTime { get; set; } = "";
    public string ErrorMessageDecimal { get; set; } = "";
    public string ErrorMessageInteger { get; set; } = "";
    public string ErrorMessageTextArea { get; set; } = "";
    public string ErrorMessageTextBasic { get; set; } = "";
    public string ErrorMessageTextEditor { get; set; } = "";
    public string ErrorMessageTextEmail { get; set; } = "";
    public string ErrorMessageTextFile { get; set; } = "";
    public string ErrorMessageTextHexColour { get; set; } = "";
    public string ErrorMessageTextPassword { get; set; } = "";
    public string ErrorMessageTextPhoneNumber { get; set; } = "";
    public string ErrorMessageTextTag { get; set; } = "";
    public string ErrorMessageTextURL { get; set; } = "";
    public string ErrorMessageClientStatusId { get; set; } = "";
    public string ErrorMessageTimeSpan { get; set; } = "";
    

    //Progress bar for TextFile
    public bool DisplayProgressForTextFile { get; set; } = false;
    public int ProgressPercentForTextFile { get; set; } = 0;
    public string ProgressTextForTextFile { get; set; } = "";
    public string ProgressBarColourForTextFile { get; set; } = "bg-info";
    
    
    #endregion

    protected override void OnInitialized()
    {
        try
        {
            //Look for saved user in shared component, simulates a session
            User = StateContainer.User == null ? new() : StateContainer.User;

            lstFoldersAndPages = [];
            Client = new();

            if (User != null)
            {
                if (User.UserId != 0)
                {
                    //Logged user
                    if (User.RoleId != 1) //Only Root can access
                    {
                        NavigationManager.NavigateTo("403");
                    }

                    List<Menu> lstMenu = menuRepository
                                        .GetAll();

                    lstFoldersAndPages = rolemenuRepository
                                            .GetAllPagesAndFoldersForDashboardByRoleId(User.RoleId);

                    lstRole = roleRepository.GetAll();

                    if (ClientId == 0)
                    {
                        //Create new Client
                        Client = new();
                    }
                    else
                    {
                        //Edit Client

                        Client = clientRepository
                                    .GetByClientId(ClientId);
                    }                    
                }
                else
                {
                    //Not logged user

                    //Redirect to...
                    NavigationManager.NavigateTo("Login");
                }
            }
            else
            {
                //Impossible
            }

            base.OnInitialized();
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = User.UserId == 0 ? 1 : User.UserId,
                    UserLastModificationId = User.UserId == 0 ? 1 : User.UserId,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }
    }

    private async Task Submit()
    {
        try
        {
            if (ClientId == 0)
            {
                //Create new Client
                Client.Active = true;
                Client.UserCreationId = User.UserId;
                Client.UserLastModificationId = User.UserId;
                Client.DateTimeCreation = DateTime.Now;
                Client.DateTimeLastModification = DateTime.Now;

                if(Check("") == null)
                {
                    clientRepository
                        .Add(Client);
                }


            }
            else
            {
                //Update data
                Client.DateTimeLastModification = DateTime.Now;
                Client.UserLastModificationId = User.UserId;

                if(Check("") == null)
                {
                    clientRepository
                            .Update(Client);
                }
            }

            //Redirect to users page
            NavigationManager.NavigateTo("EmptyProject/ClientPage");
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = User.UserId == 0 ? 1 : User.UserId,
                    UserLastModificationId = User.UserId == 0 ? 1 : User.UserId,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }
        finally
        {
            //Re-render the page to show ScannedText
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
    }

    #region Handlers
    private async Task HandleBooleanChange(ChangeEventArgs e)
    {
        Client.Boolean = Convert.ToBoolean(e.Value?.ToString());
        ValidationResult ValidationResult = Check("[Boolean]");

        if (ValidationResult == null)
        {
            ErrorMessageBoolean = $@"";
        }
        else
        {
            ErrorMessageBoolean = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleDateTimeChange(ChangeEventArgs e)
    {
        Client.DateTime = Convert.ToDateTime(e.Value?.ToString());
        ValidationResult ValidationResult = Check("[DateTime]");

        if (ValidationResult == null)
        {
            ErrorMessageDateTime = $@"";
        }
        else
        {
            ErrorMessageDateTime = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleDecimalChange(ChangeEventArgs e)
    {
        Client.Decimal = Convert.ToDecimal(e.Value?.ToString());
        ValidationResult ValidationResult = Check("[Decimal]");

        if (ValidationResult == null)
        {
            ErrorMessageDecimal = $@"";
        }
        else
        {
            ErrorMessageDecimal = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleIntegerChange(ChangeEventArgs e)
    {
        Client.Integer = Convert.ToInt32(e.Value?.ToString());
        ValidationResult ValidationResult = Check("[Integer]");

        if (ValidationResult == null)
        {
            ErrorMessageInteger = $@"";
        }
        else
        {
            ErrorMessageInteger = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextAreaChange(ChangeEventArgs e)
    {
        Client.TextArea = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextArea]");

        if (ValidationResult == null)
        {
            ErrorMessageTextArea = $@"";
        }
        else
        {
            ErrorMessageTextArea = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextBasicChange(ChangeEventArgs e)
    {
        Client.TextBasic = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextBasic]");

        if (ValidationResult == null)
        {
            ErrorMessageTextBasic = $@"";
        }
        else
        {
            ErrorMessageTextBasic = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextEditorChange(ChangeEventArgs e)
    {
        Client.TextEditor = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextEditor]");

        if (ValidationResult == null)
        {
            ErrorMessageTextEditor = $@"";
        }
        else
        {
            ErrorMessageTextEditor = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextEmailChange(ChangeEventArgs e)
    {
        Client.TextEmail = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextEmail]");

        if (ValidationResult == null)
        {
            ErrorMessageTextEmail = $@"";
        }
        else
        {
            ErrorMessageTextEmail = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextFileChange(ChangeEventArgs e)
    {
        Client.TextFile = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextFile]");

        if (ValidationResult == null)
        {
            ErrorMessageTextFile = $@"";
        }
        else
        {
            ErrorMessageTextFile = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextHexColourChange(ChangeEventArgs e)
    {
        Client.TextHexColour = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextHexColour]");

        if (ValidationResult == null)
        {
            ErrorMessageTextHexColour = $@"";
        }
        else
        {
            ErrorMessageTextHexColour = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextPasswordChange(ChangeEventArgs e)
    {
        Client.TextPassword = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextPassword]");

        if (ValidationResult == null)
        {
            ErrorMessageTextPassword = $@"";
        }
        else
        {
            ErrorMessageTextPassword = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextPhoneNumberChange(ChangeEventArgs e)
    {
        Client.TextPhoneNumber = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextPhoneNumber]");

        if (ValidationResult == null)
        {
            ErrorMessageTextPhoneNumber = $@"";
        }
        else
        {
            ErrorMessageTextPhoneNumber = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextTagChange(ChangeEventArgs e)
    {
        Client.TextTag = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextTag]");

        if (ValidationResult == null)
        {
            ErrorMessageTextTag = $@"";
        }
        else
        {
            ErrorMessageTextTag = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTextURLChange(ChangeEventArgs e)
    {
        Client.TextURL = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[TextURL]");

        if (ValidationResult == null)
        {
            ErrorMessageTextURL = $@"";
        }
        else
        {
            ErrorMessageTextURL = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleClientStatusIdChange(ChangeEventArgs e)
    {
        Client.ClientStatusId = Convert.ToInt32(e.Value?.ToString());
        ValidationResult ValidationResult = Check("[ClientStatusId]");

        if (ValidationResult == null)
        {
            ErrorMessageClientStatusId = $@"";
        }
        else
        {
            ErrorMessageClientStatusId = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        //Re-render the page to show ScannedText
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleTimeSpanChange(ChangeEventArgs e)
    {
        Client.TimeSpan = TimeSpan.Parse(e.Value?.ToString());
        ValidationResult ValidationResult = Check("[TimeSpan]");

        if (ValidationResult == null)
        {
            ErrorMessageTimeSpan = $@"";
        }
        else
        {
            ErrorMessageTimeSpan = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        //Re-render the page to show ScannedText
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    
    #endregion

    /// <summary>
    /// 
    /// </summary>
    /// <param name="attributeToValid">Debe estar encapsulado en []. Ejemplo: [Boolean]</param>
    /// <returns></returns>
    private ValidationResult Check(string attributeToValid)
    {
        try
        {
            List<ValidationResult> lstValidationResult = new List<ValidationResult>();
            ValidationContext ValidationContext = new ValidationContext(Client);

            bool IsValid = Validator.TryValidateObject(Client, ValidationContext, lstValidationResult, true);

            ValidationResult ValidationResult = lstValidationResult
            .AsQueryable()
            .FirstOrDefault(x => x.ErrorMessage.StartsWith(attributeToValid));

            if (!IsValid)
            {
                Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Para guardar correctamente debe completar los siguientes puntos: <br/> <ul>";

                foreach (var validationResult in lstValidationResult)
                {
                    validationResult.ErrorMessage = validationResult.ErrorMessage.Substring(validationResult.ErrorMessage.IndexOf(']') + 1);
                    Message += $@"<li>{validationResult}</li>";
                }

                Message = Message + "</ul></div>";
            }
            else
            {
                Message = $@"<div class=""alert alert-successs text-white font-weight-bold"" role=""alert"">
                                Todos los datos ingresados son correctos
                            </div>";
            }


            if (ValidationResult != null)
            {
                ValidationResult.ErrorMessage = ValidationResult.ErrorMessage.Substring(ValidationResult.ErrorMessage.IndexOf(']') + 1);
            }

            return ValidationResult;
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = User.UserId == 0 ? 1 : User.UserId,
                    UserLastModificationId = User.UserId == 0 ? 1 : User.UserId,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";

            return null;
        }
        finally
        {

        }
    }

    private async void UploadTextFile(InputFileChangeEventArgs e)
    {

        try
        {
            DisplayProgressForTextFile = true;
            ProgressPercentForTextFile = 80;
            ProgressBarColourForTextFile = "bg-info";

            string path = Path.Combine(
                Environment.CurrentDirectory,
                "wwwroot",
                "Uploads",
                "EmptyProject",
                "Client",
                e.File.Name);

            long MaxFileSize = 1024L * 1024L; //3MB max.

            await using FileStream FileStream = new(path, FileMode.Create);
            await e.File.OpenReadStream(MaxFileSize).CopyToAsync(FileStream);

            FileStream.Close();

            string Limitator = "\\wwwroot";
            int StartIndex = path.IndexOf(Limitator);
            string Result = "";

            if (StartIndex != -1)
            {
                Result = path.Substring(StartIndex + Limitator.Length);
            }

            Client!.TextFile = Result;

            Check("[TextFile]");

            ProgressPercentForTextFile = 100;
            ProgressBarColourForTextFile = "bg-success";
            DisplayProgressForTextFile = false;
        }
        catch (Exception ex)
        {
            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                            Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                         </div>";

            ProgressPercentForTextFile = 100;
            ProgressBarColourForTextFile = "bg-danger";
        }
        finally
        {
            //Re-render the page to show ScannedText
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
    }

    
}

